{"version":3,"sources":["components/navPages/Home.js","components/experimentComponents/Description.js","components/experimentComponents/Util.js","components/experimentComponents/Graph1.js","components/experimentComponents/Graph3.js","components/experimentComponents/Graph4.js","components/experimentComponents/Refresh.js","components/experimentComponents/Completion.js","components/navPages/Experiment.js","components/navigation/NavigationBar.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","className","href","target","Description","saveAndContinue","e","preventDefault","props","nextStep","Button","onClick","this","React","Component","isGoodInput","text","isNaN","num","parseInt","badInputAlert","alert","Graph1","graphType","truePercent","textField","value","json","values","participantID","step","addData","divRef","createRef","drawBarChart","svg","d3","current","append","attr","width","height","getRandomInt","min","max","Math","ceil","floor","random","height1","height2","height3","height4","height5","height6","height7","height8","height9","height10","getHeight","barloc","dotloc","barwidth","size1","size2","round","ref","Row","Col","Form","Control","type","placeholder","node","Graph3","height1to5","Graph4","getRandomFloat","parseFloat","toFixed","arcGenerator","innerRadius","outerRadius","radius1","radius2","radius3","radius4","radius5","radius6","radius7","radius8","radius9","arcData","label","startAngle","endAngle","PI","count","dot1percent","dot2percent","selectAll","data","enter","each","d","centroid","Refresh","Completion","console","log","filename","Experiment","state","toString","substr","graphs","shuffle","active","numGraphs","length","a","setState","pop","concat","i","j","component","NavigationBar","basename","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e8cd006.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n  return (\n      <div className=\"Home\">\n        <h1>CS480x Project 3</h1>\n        <p>We designed a simple experiment to determine if bar, pie, or stacked bar charts are better.</p>\n        <p>This project served as an intro to react, and we were able to get a better understanding of how to use\n          component based frameworks.</p>\n        <p>If you'd like to learn more about our findings or view our source code, check out <a\n            href=\"https://github.com/kjmj/graph-experiment\" target=\"_blank\">our GitHub repo.</a></p>\n        <p>Click on the experiment tab to start!</p>\n      </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport {Button} from \"react-bootstrap\";\n\nclass Description extends React.Component {\n  saveAndContinue = (e) => {\n    e.preventDefault();\n    this.props.nextStep();\n  };\n\n  render() {\n    return (\n        <div className=\"Description\">\n          <h2>Welcome to our Experiment!</h2>\n          <h4>You will see bar, pie, and stacked bar charts.</h4>\n          <h4>Please enter what percent the smaller marked bar/slice is of the bigger marked\n            bar/slice into the text box as an integer.</h4>\n          <h4>Note it is possible that the bar/slices can be the same size. In this case,\n            100 is an appropriate answer.</h4>\n          <h4>Thank You!</h4>\n          <Button onClick={this.saveAndContinue}>Start</Button>\n        </div>\n    );\n  }\n}\n\nexport default Description;\n","/// true if text is a number between 1 and 100\nexport const isGoodInput = (text) => {\n  if(text !== \"\" && !isNaN(text)) {\n    const num = parseInt(text);\n    return num >= 0 && num <= 100;\n  }\n  return false;\n};\n\nexport const badInputAlert = () => {\n  alert('Please enter a number between 0 and 100')\n};","import React from 'react';\nimport * as d3 from 'd3';\nimport {Button, Form} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {isGoodInput, badInputAlert} from './Util'\n\nclass Graph1 extends React.Component {\n  graphType = \"Bar\";\n  truePercent = 0;\n\n  saveAndContinue = (e) => {\n    e.preventDefault();\n\n    if(isGoodInput(this.textField.value)) {\n      const json = {\n        'vizType': this.graphType,\n        'participantID': this.props.values.participantID,\n        'trialNumber': this.props.values.step,\n        'truePercent': this.truePercent,\n        'reportedPercent': parseInt(this.textField.value)\n      };\n      this.props.addData(json);\n      this.props.nextStep();\n    } else {\n      badInputAlert();\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.drawBarChart()\n  }\n\n  drawBarChart() {\n    // Add an SVG\n    const svg = d3.select(this.divRef.current).append(\"svg\").attr(\"width\", this.props.width).attr(\"height\", this.props.height);\n\n    //Returns a random int between min and max\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    const height1 = getRandomInt(50, 100);\n    const height2 = getRandomInt(50, 100);\n    const height3 = getRandomInt(50, 100);\n    const height4 = getRandomInt(50, 100);\n    const height5 = getRandomInt(50, 100);\n    const height6 = getRandomInt(50, 100);\n    const height7 = getRandomInt(50, 100);\n    const height8 = getRandomInt(50, 100);\n    const height9 = getRandomInt(50, 100);\n    const height10 = getRandomInt(50, 100);\n\n    function getHeight(num) {\n      switch (num) {\n        case 0:\n          return height1;\n        case 1:\n          return height2;\n        case 2:\n          return height3;\n        case 3:\n          return height4;\n        case 4:\n          return height5;\n        case 5:\n          return height6;\n        case 6:\n          return height7;\n        case 7:\n          return height8;\n        case 8:\n          return height9;\n        case 9:\n          return height10;\n        default:\n          return;\n      }\n    }\n\n    var barwidth = 50;\n    var barloc = 540;\n\n    svg.append(\"rect\").attr(\"x\", barloc + (0 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height1).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (1 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height2).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (2 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height3).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (3 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height4).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (4 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height5).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (5 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height6).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (6 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height7).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (7 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height8).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (8 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\", height9).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", barloc + (9 * barwidth)).attr(\"y\", 375).attr(\"width\", barwidth).attr(\"height\",height10).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n\n    var dotloc = getRandomInt(0, 7);\n\n    svg.append(\"circle\").attr(\"cx\", barloc + (dotloc * barwidth) + (barwidth / 2)).attr(\"cy\", 400).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"black\");\n    svg.append(\"circle\").attr(\"cx\", barloc + ((dotloc + 2) * barwidth) + (barwidth / 2)).attr(\"cy\", 400).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"black\");\n\n    const size1 = getHeight(dotloc);\n    const size2 = getHeight(dotloc + 2);\n\n    if (size1 < size2) {\n      this.truePercent = Math.round((size1/size2) * 100);\n    }\n    else {\n      this.truePercent = Math.round((size2/size1) * 100);\n    }\n  }\n\n\n  render() {\n    return (\n        <div>\n          <div ref={this.divRef}>\n            <p>Bar Chart</p>\n          </div>\n          <Row>\n            <Col>\n              <Form.Control type=\"text\" placeholder=\"What percent is the smaller marked bar of the bigger marked bar?\" ref={node => this.textField = node}/>\n            </Col>\n            <Col>\n              <Button onClick={this.saveAndContinue}>Next</Button>\n            </Col>\n          </Row>\n        </div>\n    )\n  }\n}\n\nexport default Graph1;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport {Button, Form} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {isGoodInput, badInputAlert} from './Util'\n\nclass Graph3 extends React.Component {\n  graphType = \"Stacked Bar\";\n  truePercent = 0;\n\n  saveAndContinue = (e) => {\n    e.preventDefault();\n\n    if(isGoodInput(this.textField.value)) {\n      const json = {\n        'vizType': this.graphType,\n        'participantID': this.props.values.participantID,\n        'trialNumber': this.props.values.step,\n        'truePercent': this.truePercent,\n        'reportedPercent': parseInt(this.textField.value)\n      };\n      this.props.addData(json);\n      this.props.nextStep();\n    } else {\n      badInputAlert();\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.drawBarChart()\n  }\n\n  drawBarChart() {\n    // Add an SVG\n    const svg = d3.select(this.divRef.current).append(\"svg\").attr(\"width\", this.props.width).attr(\"height\", this.props.height);\n\n\n    //Returns a random int between min and max\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n\n    const height1 = getRandomInt(30, 50);\n    const height2 = getRandomInt(30, 50);\n    const height3 = getRandomInt(30, 50);\n    const height4 = getRandomInt(30, 50);\n    const height5 = getRandomInt(30, 50);\n    const height6 = getRandomInt(30, 50);\n    const height7 = getRandomInt(30, 50);\n    const height8 = getRandomInt(30, 50);\n    const height9 = getRandomInt(30, 50);\n    const height10 = getRandomInt(30, 50);\n    const height1to5 = height1 + height2 + height3 + height4 + height5;\n\n    function getHeight(num) {\n      switch (num) {\n        case 0:\n          return 0;\n        case 1:\n          return height1;\n        case 2:\n          return height1 + height2;\n        case 3:\n          return height1 + height2 + height3;\n        case 4:\n          return height1 + height2 + height3 + height4;\n        case 5:\n          return height1to5;\n        case 6:\n          return height1to5 + height6;\n        case 7:\n          return height1to5 + height6 + height7;\n        case 8:\n          return height1to5 + height6 + height7 + height8;\n        case 9:\n          return height1to5 + height6 + height7 + height8 + height9;\n        case 10:\n          return height1to5 + height6 + height7 + height8 + height9 + height10;\n        default:\n          return;\n      }\n    }\n\n\n    var barloc = 200;\n\n\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(0)).attr(\"width\", 50).attr(\"height\", height1).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(1)).attr(\"width\", 50).attr(\"height\", height2).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(2)).attr(\"width\", 50).attr(\"height\", height3).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(3)).attr(\"width\", 50).attr(\"height\", height4).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(4)).attr(\"width\", 50).attr(\"height\", height5).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(5)).attr(\"width\", 50).attr(\"height\", height6).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(6)).attr(\"width\", 50).attr(\"height\", height7).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(7)).attr(\"width\", 50).attr(\"height\", height8).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(8)).attr(\"width\", 50).attr(\"height\", height9).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n    svg.append(\"rect\").attr(\"x\", 770).attr(\"y\", barloc + getHeight(9)).attr(\"width\", 50).attr(\"height\",height10).attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n\n    var dotloc = getRandomInt(0, 7);\n\n    svg.append(\"circle\").attr(\"cx\", 795).attr(\"cy\", 15 + barloc + getHeight(dotloc)).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"black\");\n    svg.append(\"circle\").attr(\"cx\", 795).attr(\"cy\", 15 + barloc + getHeight(dotloc + 2)).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"black\");\n\n    const size1 = getHeight(dotloc + 1) - getHeight(dotloc);\n    const size2 = getHeight(dotloc + 3) - getHeight(dotloc + 2);\n\n    if (size1 < size2) {\n      this.truePercent = Math.round((size1/size2) * 100);\n    }\n    else {\n      this.truePercent = Math.round((size2/size1) * 100);\n    }\n  }\n\n  render() {\n    return (\n        <div>\n          <div ref={this.divRef}>\n            <p>Stacked Bar Chart</p>\n          </div>\n          <Row>\n            <Col>\n              <Form.Control type=\"text\" placeholder=\"What percent is the smaller marked bar of the bigger marked bar?\" ref={node => this.textField = node}/>\n            </Col>\n            <Col>\n              <Button onClick={this.saveAndContinue}>Next</Button>\n            </Col>\n          </Row>\n        </div>\n    )\n  }\n}\n\nexport default Graph3;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport {Button, Form} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {isGoodInput, badInputAlert} from './Util'\n\nclass Graph4 extends React.Component {\n  graphType = \"Pie\";\n  truePercent = 0;\n\n  saveAndContinue = (e) => {\n    e.preventDefault();\n\n    if(isGoodInput(this.textField.value)) {\n      const json = {\n        'vizType': this.graphType,\n        'participantID': this.props.values.participantID,\n        'trialNumber': this.props.values.step,\n        'truePercent': this.truePercent,\n        'reportedPercent': parseInt(this.textField.value)\n      };\n      this.props.addData(json);\n      this.props.nextStep();\n    } else {\n      badInputAlert();\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.drawBarChart()\n  }\n\n  drawBarChart() {\n\n\n    //Returns a random int between min and max\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n\n    function getRandomFloat(min, max) {\n      return parseFloat((Math.random() * (max - min) + min).toFixed(1));\n    }\n\n\n// set the dimensions and margins of the graph\n    const width = this.props.width/2;\n    const height = this.props.height/2;\n\n// append the svg object to the div called 'my_dataviz'\n    const svg = d3.select(this.divRef.current).append(\"svg\").attr(\"width\", this.props.width).attr(\"height\", this.props.height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n// Create an arc generator with configuration\n    var arcGenerator = d3.arc()\n        .innerRadius(0)\n        .outerRadius(100);\n\n    const radius1 = getRandomFloat(0.2, 0.6);\n    const radius2 = getRandomFloat(radius1 + 0.2, radius1 + 1);\n    const radius3 = getRandomFloat(radius2 + 0.2, radius2 + 1);\n    const radius4 = getRandomFloat(radius3 + 0.2, radius3 + 1);\n    const radius5 = getRandomFloat(radius4 + 0.2, radius4 + 1);\n    const radius6 = getRandomFloat(radius5 + 0.2, radius5 + 1);\n    const radius7 = getRandomFloat(radius6 + 0.2, radius6 + 1);\n    const radius8 = getRandomFloat(radius7 + 0.2, radius7 + 1);\n    const radius9 = getRandomFloat(radius8 + 0.2, 6);\n\n    var arcData = [\n      {label: '1', startAngle: 0, endAngle: radius1},\n      {label: '2', startAngle: radius1, endAngle: radius2},\n      {label: '3', startAngle: radius2, endAngle: radius3},\n      {label: '4', startAngle: radius3, endAngle: radius4},\n      {label: '5', startAngle: radius4, endAngle: radius5},\n      {label: '6', startAngle: radius5, endAngle: radius6},\n      {label: '7', startAngle: radius6, endAngle: radius7},\n      {label: '8', startAngle: radius7, endAngle: radius8},\n      {label: '9', startAngle: radius8, endAngle: radius9},\n      {label: '10', startAngle: radius9, endAngle: 2* Math.PI}\n    ];\n\n    const dotloc = getRandomInt(1, 8);\n    let count = 0;\n    let dot1percent = 0;\n    let dot2percent = 0;\n\n// Create a path element and set its d attribute\n    d3.select('g')\n        .selectAll('path')\n        .data(arcData)\n        .enter()\n        .append('path')\n        .attr('d', arcGenerator)\n        .attr(\"fill\", \"white\")\n        .attr(\"stroke\", \"black\");\n\n// Add labels, using .centroid() to position\n    d3.select('g')\n        .selectAll('text')\n        .data(arcData)\n        .enter()\n        .append('text')\n        .each(function(d) {\n          var centroid = arcGenerator.centroid(d);\n          d3.select(this)\n              .attr('x', centroid[0])\n              .attr('y', centroid[1])\n              .attr('dy', '0.33em')\n              if(parseInt(d.label) === dotloc || parseInt(d.label) === dotloc + 2) {\n                svg.append(\"circle\").attr(\"cx\", centroid[0]).attr(\"cy\", centroid[1]).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"black\");\n                if (count === 1) {\n                  dot2percent = d.endAngle - d.startAngle;\n                }\n                else {\n                  dot1percent = d.endAngle - d.startAngle;\n                }\n\n                count++;\n              }\n        });\n\n    if (dot1percent < dot2percent) {\n      this.truePercent = Math.round((dot1percent/dot2percent) * 100);\n    }\n    else {\n      this.truePercent = Math.round((dot2percent/dot1percent) * 100);\n    }\n\n\n  }\n\n  render() {\n    return (\n        <div>\n          <div ref={this.divRef}>\n            <p>Pie Chart</p>\n          </div>\n          <Row>\n            <Col>\n              <Form.Control type=\"text\" placeholder=\"What percent is the smaller marked slice of the bigger marked slice?\" ref={node => this.textField = node}/>\n            </Col>\n            <Col>\n              <Button onClick={this.saveAndContinue}>Next</Button>\n            </Col>\n          </Row>\n        </div>\n    )\n  }\n}\n\nexport default Graph4;\n","import React from 'react';\n\nclass Refresh extends React.Component {\n  render() {\n    return (<div/>)\n  }\n}\n\nexport default Refresh;\n","import React from 'react';\nimport { CSVLink } from \"react-csv\";\n\nclass Completion extends React.Component {\n  render() {\n    const {values: { data }} = this.props;\n    console.log(data);\n\n    return (\n        <div className=\"Completion\">\n          <p>Thanks for completing our experiment!</p>\n          <CSVLink data={data} filename='experiment.csv'>\n            Download your data\n          </CSVLink>\n        </div>\n    );\n  }\n}\n\nexport default Completion;\n","import React from 'react';\nimport Description from \"../experimentComponents/Description\"\nimport Graph1 from \"../experimentComponents/Graph1\"\nimport Graph3 from \"../experimentComponents/Graph3\"\nimport Graph4 from \"../experimentComponents/Graph4\"\nimport Refresh from \"../experimentComponents/Refresh\"\nimport Completion from \"../experimentComponents/Completion\"\n\nclass Experiment extends React.Component {\n  state = {\n    step: 0,\n    participantID: '_' + Math.random().toString(36).substr(2, 9),\n    data: [],\n    graphs: this.shuffle([Graph1, Graph1, Graph3, Graph3, Graph4, Graph4]),\n    active: ''\n  };\n  numGraphs = this.state.graphs.length;\n\n  // go to the next step, and change the active component\n  nextStep = async () => {\n    const {step} = this.state;\n\n    // react was being weird and not re-rendering certain widgets if they were repeated\n    // my solution is to force react to re-render an empty div, then render the new active graph\n    await this.setState({\n      active: Refresh\n    });\n\n    // now pick a new graph to show\n    this.setState({\n      step: step + 1,\n      active: this.state.graphs.pop()\n    })\n  };\n\n  // add data to the data object\n  addData = (json) => {\n    this.setState({\n          data: this.state.data.concat(json)\n        }\n    )\n  };\n\n  /**\n   * Shuffles array in place. ES6 version\n   * @param {Array} a items An array containing the items.\n   */\n  shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  // determine which component to show\n  render() {\n    const {step, participantID, data} = this.state;\n    const values = {step, participantID, data};\n    const numGraphs = this.numGraphs;\n\n    // depending on which step they are in the experiment, show a component\n    let component;\n    if(step === 0) {\n      component = <Description nextStep={this.nextStep}/>;\n    } else if (numGraphs + 1 === step) {\n      component = <Completion values={values}/>;\n    } else {\n      component = <this.state.active\n          width={1280}\n          height={720}\n          nextStep={this.nextStep}\n          addData={this.addData}\n          values={values}\n      />;\n    }\n\n\n    return <div>\n      <p>Step {step} / {numGraphs + 1}</p>\n      {component}\n    </div>\n  }\n}\n\nexport default Experiment;\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"../navPages/Home\"\nimport Experiment from \"../navPages/Experiment\"\nimport {Nav, Navbar} from \"react-bootstrap\";\n\nfunction NavigationBar() {\n  return (\n      <HashRouter basename=\"/\">\n        <div>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#\">Home</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#experiment\">Experiment</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n\n          <hr />\n\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/experiment\" component={Experiment} />\n        </div>\n      </HashRouter>\n  );\n}\n\nexport default NavigationBar;\n","import React from 'react';\nimport '../style/App.css';\nimport NavigationBar from \"./navigation/NavigationBar\";\n\nfunction App() {\n  return (\n      <NavigationBar/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}